#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_NAME_LENGTH 50
#define MAX_DESCRIPTION_LENGTH 100
#define MAX_INVENTORY_SIZE 10

struct Character {
    char name[MAX_NAME_LENGTH];
    int health;
    int max_health;
    int attack;
    int defense;
    int experience;
    int level;
};

struct Item {
    char name[MAX_NAME_LENGTH];
    char description[MAX_DESCRIPTION_LENGTH];
    int health_bonus;
    int attack_bonus;
    int defense_bonus;
};

void printCharacterInfo(struct Character *character) {
    printf("Name: %s\n", character->name);
    printf("Level: %d\n", character->level);
    printf("Health: %d/%d\n", character->health, character->max_health);
    printf("Attack: %d\n", character->attack);
    printf("Defense: %d\n", character->defense);
    printf("Experience: %d\n", character->experience);
}

struct Character createCharacter() {
    struct Character player;
    printf("Enter your character's name: ");
    scanf("%s", player.name);
    player.max_health = 100;
    player.health = player.max_health;
    player.attack = 10;
    player.defense = 5;
    player.experience = 0;
    player.level = 1;
    return player;
}

struct Item createItem() {
    struct Item item;
    printf("Enter item name: ");
    scanf("%s", item.name);
    printf("Enter item description: ");
    scanf("%s", item.description);
    printf("Enter health bonus: ");
    scanf("%d", &item.health_bonus);
    printf("Enter attack bonus: ");
    scanf("%d", &item.attack_bonus);
    printf("Enter defense bonus: ");
    scanf("%d", &item.defense_bonus);
    return item;
}

void displayInventory(struct Item *inventory, int inventorySize) {
    printf("Inventory:\n");
    for (int i = 0; i < inventorySize; i++) {
        printf("%d. %s - %s\n", i + 1, inventory[i].name, inventory[i].description);
    }
}

void manageInventory(struct Character *player, struct Item *inventory, int *inventorySize) {
    int choice;
    printf("\n1. View Inventory\n2. Use Item\n3. Quit\n");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            // Display inventory
            displayInventory(inventory, *inventorySize);
            break;
        case 2:
            // Use item (simplified, assumes one-time use)
            if (*inventorySize > 0) {
                displayInventory(inventory, *inventorySize);
                printf("Enter the number of the item to use: ");
                int itemNumber;
                scanf("%d", &itemNumber);

                if (itemNumber >= 1 && itemNumber <= *inventorySize) {
                    struct Item usedItem = inventory[itemNumber - 1];
                    player->health += usedItem.health_bonus;
                    player->attack += usedItem.attack_bonus;
                    player->defense += usedItem.defense_bonus;
                    printf("Used %s!\n", usedItem.name);

                    // Remove the used item from inventory
                    for (int i = itemNumber - 1; i < *inventorySize - 1; i++) {
                        inventory[i] = inventory[i + 1];
                    }
                    (*inventorySize)--;
                } else {
                    printf("Invalid item number!\n");
                }
            } else {
                printf("Inventory is empty!\n");
            }
            break;
        case 3:
            // Quit
            break;
        default:
            printf("Invalid choice!\n");
    }
}

void levelUp(struct Character *player) {
    printf("Congratulations! You leveled up!\n");
    player->level++;
    player->max_health += 20;
    player->health = player->max_health;
    player->attack += 5;
    player->defense += 2;
    player->experience = 0;
}

void gainExperience(struct Character *player, int experience) {
    player->experience += experience;
    printf("You gained %d experience points!\n", experience);

    // Check for level up
    if (player->experience >= player->level * 100) {
        levelUp(player);
    }
}

void randomEncounter(struct Character *player) {
    // Simulate a random encounter with an enemy
    int enemyLevel = player->level + rand() % 3; // Enemies can be up to 2 levels higher
    struct Character enemy = {"Enemy", 30 + enemyLevel * 10, 5 + enemyLevel * 2, 2 + enemyLevel};
    printf("\nYou encountered a level %d wild %s! Prepare for battle!\n", enemyLevel, enemy.name);

    // Battle loop
    while (player->health > 0 && enemy.health > 0) {
        printf("\n1. Attack\n2. Use Item\n3. Run Away\n");
        int choice;
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                // Fight
                combat(player, &enemy);
                break;
            case 2:
                // Manage inventory
                manageInventory(player, player->inventory, &player->inventorySize);
                break;
            case 3:
                // Attempt to run away
                if (rand() % 2 == 0) {
                    printf("You successfully escaped!\n");
                    return;
                } else {
                    printf("Escape attempt failed! You must continue the battle.\n");
                }
                break;
            default:
                printf("Invalid choice!\n");
        }
    }

    // Check the outcome of the battle
    if (player->health > 0) {
        int experienceGained = enemyLevel * 20;
        printf("You defeated the level %d %s and gained %d experience points!\n", enemyLevel, enemy.name, experienceGained);
        gainExperience(player, experienceGained);
    } else {
        printf("You were defeated by the level %d %s. Game over!\n", enemyLevel, enemy.name);
        exit(0);
    }
}

void combat(struct Character *player, struct Character *enemy) {
    printf("Battle begins! %s vs %s\n", player->name, enemy->name);
    
    // Simulate combat logic (more detailed than before)
    while (player->health > 0 && enemy->health > 0) {
        int playerDamage = player->attack - enemy->defense;
        int enemyDamage = enemy->attack - player->defense;

        // Apply damage to characters
        if (playerDamage > 0) {
            enemy->health -= playerDamage;
            printf("%s deals %d damage to %s!\n", player->name, playerDamage, enemy->name);
        } else {
            printf("%s's attack has no effect on %s!\n", player->name, enemy->name);
